import React, { useState } from 'react';
import {
  Input,
  Button,
  Steps,
  DatePicker,
  Select,
  InputNumber,
  Switch,
  Card,
  Space,
  Typography,
  Divider,
} from 'antd';
import {
  PlusOutlined,
  DeleteOutlined,
  ArrowLeftOutlined,
  ArrowRightOutlined,
  FileTextOutlined,
  TeamOutlined,
  TrophyOutlined,
} from '@ant-design/icons';
import 'antd/dist/reset.css';
import { useNavigate } from 'react-router-dom';

const { TextArea } = Input;
const { Title, Text } = Typography;

export default function HackathonForm() {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({});
  const [prizes, setPrizes] = useState([
    {
      id: 1,
      rank: '1st Place',
      value: '10.000.000 VND',
      description: 'Ti·ªÅn m·∫∑t + C∆° h·ªôi th·ª±c t·∫≠p t·∫°i FPT',
    },
    {
      id: 2,
      rank: '2nd Place',
      value: '10.000.000 VND',
      description: 'Ti·ªÅn m·∫∑t + C∆° h·ªôi th·ª±c t·∫≠p t·∫°i FPT',
    },
  ]);
  const [stages, setStages] = useState([
    { id: 1, name: 'ƒêƒÉng k√Ω' },
    { id: 2, name: 'ƒê√°nh gi√°' },
  ]);

  const steps = [
    { title: 'Th√¥ng tin c∆° b·∫£n', icon: <FileTextOutlined /> },
    { title: 'C·∫•u h√¨nh tham gia', icon: <TeamOutlined /> },
    { title: 'Gi·∫£i th∆∞·ªüng & Giai ƒëo·∫°n', icon: <TrophyOutlined /> },
    { title: 'Quy ƒë·ªãnh & X√°c nh·∫≠n', icon: <TrophyOutlined /> },
  ];

  const addPrize = () => {
    setPrizes([
      ...prizes,
      { id: Date.now(), rank: '', value: '', description: '' },
    ]);
  };

  const removePrize = (id) => {
    setPrizes(prizes.filter((p) => p.id !== id));
  };

  const addStage = () => {
    setStages([...stages, { id: Date.now(), name: '' }]);
  };

  const removeStage = (id) => {
    setStages(stages.filter((s) => s.id !== id));
  };

  const nextStep = () => {
    setCurrentStep(currentStep + 1);
  };

  const prevStep = () => {
    setCurrentStep(currentStep - 1);
  };

  const handleInputChange = (field, value) => {
    setFormData({ ...formData, [field]: value });
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <Card
            className="bg-white border border-gray-200 rounded-xl shadow-sm mt-6"
            title={
              <Space>
                <FileTextOutlined className="text-orange-500 text-lg" />
                <span className="text-gray-900 font-semibold">
                  Th√¥ng tin c∆° b·∫£n
                </span>
              </Space>
            }
          >
            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                T√™n Hackathon *
              </label>
              <Input
                placeholder="VD: SEAL Hackathon 2024"
                className="h-10 text-base"
                onChange={(e) => handleInputChange('name', e.target.value)}
              />
            </div>

            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                Tagline
              </label>
              <Input
                placeholder="M·ªôt c√¢u m√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ hackathon"
                className="h-10 text-base"
                onChange={(e) => handleInputChange('tagline', e.target.value)}
              />
            </div>

            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                M√¥ t·∫£ chi ti·∫øt *
              </label>
              <TextArea
                rows={6}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ hackathon, m·ª•c ti√™u, ch·ªß ƒë·ªÅ..."
                className="text-base"
                onChange={(e) =>
                  handleInputChange('description', e.target.value)
                }
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label className="block text-gray-700 text-sm font-medium mb-2">
                  Ng√†y b·∫Øt ƒë·∫ßu *
                </label>
                <DatePicker
                  showTime
                  className="w-full h-10"
                  placeholder="mm/dd/yyyy --:-- --"
                  onChange={(date) => handleInputChange('startDate', date)}
                />
              </div>

              <div>
                <label className="block text-gray-700 text-sm font-medium mb-2">
                  Ng√†y k·∫øt th√∫c *
                </label>
                <DatePicker
                  showTime
                  className="w-full h-10"
                  placeholder="mm/dd/yyyy --:-- --"
                  onChange={(date) => handleInputChange('endDate', date)}
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-gray-700 text-sm font-medium mb-2">
                  H·∫°n ƒëƒÉng k√Ω *
                </label>
                <DatePicker
                  showTime
                  className="w-full h-10"
                  placeholder="mm/dd/yyyy --:-- --"
                  onChange={(date) =>
                    handleInputChange('registrationDeadline', date)
                  }
                />
              </div>

              <div>
                <label className="block text-gray-700 text-sm font-medium mb-2">
                  H√¨nh th·ª©c *
                </label>
                <Select
                  defaultValue="online"
                  className="w-full h-10"
                  onChange={(value) => handleInputChange('format', value)}
                >
                  <Select.Option value="online">Online</Select.Option>
                  <Select.Option value="offline">Offline</Select.Option>
                  <Select.Option value="hybrid">Hybrid</Select.Option>
                </Select>
              </div>
            </div>
          </Card>
        );

      case 1:
        return (
          <Card
            className="bg-white border border-gray-200 rounded-xl shadow-sm mt-6"
            title={
              <Space>
                <TeamOutlined className="text-orange-500 text-lg" />
                <span className="text-gray-900 font-semibold">
                  C·∫•u h√¨nh tham gia
                </span>
              </Space>
            }
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label className="block text-gray-700 text-sm font-medium mb-2">
                  S·ªë th√†nh vi√™n t·ªëi thi·ªÉu/nh√≥m *
                </label>
                <InputNumber
                  min={1}
                  defaultValue={1}
                  className="w-full py-1"
                  onChange={(value) => handleInputChange('minTeamSize', value)}
                />
              </div>

              <div>
                <label className="block text-gray-700 text-sm font-medium mb-2">
                  S·ªë th√†nh vi√™n t·ªëi ƒëa/nh√≥m *
                </label>
                <InputNumber
                  min={1}
                  defaultValue={4}
                  className="w-full py-1"
                  onChange={(value) => handleInputChange('maxTeamSize', value)}
                />
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                S·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia t·ªëi ƒëa
              </label>
              <InputNumber
                placeholder="ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng gi·ªõi h·∫°n"
                className="py-1 w-full"
                onChange={(e) =>
                  handleInputChange('maxParticipants', e.target.value)
                }
              />
            </div>

            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                Cho ph√©p tham gia c√° nh√¢n
              </label>
              <Switch
                defaultChecked
                onChange={(checked) =>
                  handleInputChange('allowIndividual', checked)
                }
              />
              <div className="mt-2">
                <Text className="text-gray-500">
                  Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒëƒÉng k√Ω m√† kh√¥ng c·∫ßn t·∫°o nh√≥m
                </Text>
              </div>
            </div>

            <Divider className="border-gray-200" />

            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                Y√™u c·∫ßu x√°c minh t√†i kho·∫£n
              </label>
              <Switch
                onChange={(checked) =>
                  handleInputChange('requireVerification', checked)
                }
              />
              <div className="mt-2">
                <Text className="text-gray-500">
                  Ng∆∞·ªùi tham gia ph·∫£i x√°c minh email/s·ªë ƒëi·ªán tho·∫°i tr∆∞·ªõc khi
                  ƒëƒÉng k√Ω
                </Text>
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg mt-6">
              <Text className="text-blue-600">
                üí° S·ªë th√†nh vi√™n t·ªëi thi·ªÉu ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng s·ªë th√†nh vi√™n
                t·ªëi ƒëa. N·∫øu cho ph√©p tham gia c√° nh√¢n, s·ªë th√†nh vi√™n t·ªëi thi·ªÉu
                n√™n l√† 1.
              </Text>
            </div>
          </Card>
        );

      case 2:
        return (
          <div className="mt-6">
            <Card
              className="bg-white border border-gray-200 rounded-xl shadow-sm mb-6"
              title={
                <div className="flex justify-between items-center">
                  <Space>
                    <TrophyOutlined className="text-yellow-400 text-lg" />
                    <span className="text-gray-900 font-semibold">
                      Gi·∫£i th∆∞·ªüng
                    </span>
                  </Space>
                  <Button
                    type="primary"
                    icon={<PlusOutlined />}
                    onClick={addPrize}
                  >
                    Th√™m gi·∫£i
                  </Button>
                </div>
              }
            >
              {prizes.map((prize, index) => (
                <Card
                  key={prize.id}
                  className="bg-gray-50 mb-4 border border-gray-200"
                  title={
                    <div className="flex justify-between items-center">
                      <span className="text-primary text-sm font-medium">
                        {prize.rank || `${index + 1}st Place`}
                      </span>
                      <Button
                        type="text"
                        danger
                        icon={<DeleteOutlined />}
                        onClick={() => removePrize(prize.id)}
                      />
                    </div>
                  }
                >
                  <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-medium mb-2">
                      H·∫°ng
                    </label>
                    <Input
                      placeholder="1st Place"
                      defaultValue={prize.rank}
                      className="h-10"
                    />
                  </div>

                  <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-medium mb-2">
                      Gi√° tr·ªã
                    </label>
                    <Input
                      placeholder="VD: 10.000.000 VND"
                      defaultValue={prize.value}
                      className="h-10"
                    />
                  </div>

                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-2">
                      M√¥ t·∫£
                    </label>
                    <Input
                      placeholder="VD: Ti·ªÅn m·∫∑t + C∆° h·ªôi th·ª±c t·∫≠p t·∫°i FPT"
                      defaultValue={prize.description}
                      className="h-10"
                    />
                  </div>
                </Card>
              ))}
            </Card>

            <Card
              className="bg-white border border-gray-200 rounded-xl shadow-sm"
              title={
                <div className="flex justify-between items-center">
                  <Space>
                    <TrophyOutlined className="text-yellow-400 text-lg" />
                    <span className="text-gray-900 font-semibold">
                      C√°c giai ƒëo·∫°n
                    </span>
                  </Space>
                  <Button
                    type="primary"
                    icon={<PlusOutlined />}
                    onClick={addStage}
                  >
                    Th√™m giai ƒëo·∫°n
                  </Button>
                </div>
              }
            >
              {stages.map((stage, index) => (
                <Card
                  key={stage.id}
                  className="bg-gray-50 mb-4 border border-gray-200"
                  title={
                    <div className="flex justify-between items-center">
                      <span className="text-blue-500 text-sm font-medium">
                        Giai ƒëo·∫°n {index + 1}
                      </span>
                      <Button
                        type="text"
                        danger
                        icon={<DeleteOutlined />}
                        onClick={() => removeStage(stage.id)}
                      />
                    </div>
                  }
                >
                  <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-medium mb-2">
                      T√™n giai ƒëo·∫°n
                    </label>
                    <Input
                      placeholder="ƒêƒÉng k√Ω"
                      defaultValue={stage.name}
                      className="h-10"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                    <div>
                      <label className="block text-gray-700 text-sm font-medium mb-2">
                        Ng√†y b·∫Øt ƒë·∫ßu
                      </label>
                      <DatePicker
                        showTime
                        className="w-full h-10"
                        placeholder="mm/dd/yyyy --:-- --"
                      />
                    </div>

                    <div>
                      <label className="block text-gray-700 text-sm font-medium mb-2">
                        Ng√†y k·∫øt th√∫c
                      </label>
                      <DatePicker
                        showTime
                        className="w-full h-10"
                        placeholder="mm/dd/yyyy --:-- --"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-2">
                      M√¥ t·∫£
                    </label>
                    <TextArea
                      rows={3}
                      placeholder="M√¥ t·∫£ v·ªÅ giai ƒëo·∫°n n√†y..."
                      className="text-base"
                    />
                  </div>
                </Card>
              ))}
            </Card>
          </div>
        );

      case 3:
        return (
          <Card
            className="bg-white border border-gray-200 rounded-xl shadow-sm mt-6"
            title={
              <Space>
                <TrophyOutlined className="text-yellow-500 text-lg" />
                <span className="text-gray-900 font-semibold">
                  Quy ƒë·ªãnh & Ti√™u ch√≠
                </span>
              </Space>
            }
          >
            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                Quy ƒë·ªãnh & Lu·∫≠t l·ªá *
              </label>
              <TextArea
                rows={6}
                placeholder="Nh·∫≠p c√°c quy ƒë·ªãnh, lu·∫≠t l·ªá m√† ng∆∞·ªùi tham gia c·∫ßn tu√¢n th·ªß..."
                className="text-base"
                onChange={(e) => handleInputChange('rules', e.target.value)}
              />
              <Text className="text-gray-500 mt-2">
                VD: Kh√¥ng s·ª≠ d·ª•ng code c√≥ s·∫µn, kh√¥ng vi ph·∫°m b·∫£n quy·ªÅn, v.v.
              </Text>
            </div>

            <Divider className="border-gray-200" />

            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                Y√™u c·∫ßu k·ªπ thu·∫≠t
              </label>
              <TextArea
                rows={6}
                placeholder="C√°c y√™u c·∫ßu v·ªÅ c√¥ng ngh·ªá, k·ªπ nƒÉng c·∫ßn thi·∫øt..."
                className="text-base"
                onChange={(e) =>
                  handleInputChange('techRequirements', e.target.value)
                }
              />
              <Text className="text-gray-500 mt-2">
                VD: S·ª≠ d·ª•ng React, Node.js, c√≥ kinh nghi·ªám v·ªõi AI/ML, v.v.
              </Text>
            </div>

            <Divider className="border-gray-200" />

            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-medium mb-2">
                Ti√™u ch√≠ ƒë√°nh gi√°
              </label>
              <TextArea
                rows={6}
                placeholder="C√°c ti√™u ch√≠ ƒë√°nh gi√° d·ª± √°n..."
                className="text-base"
                onChange={(e) => handleInputChange('criteria', e.target.value)}
              />
              <Text className="text-gray-500 mt-2">
                VD: T√≠nh s√°ng t·∫°o (30%), K·ªπ thu·∫≠t (30%), Kh·∫£ nƒÉng ·ª©ng d·ª•ng (40%)
              </Text>
            </div>

            <Divider className="border-gray-200" />

            <Card
              className="bg-orange-50 border border-orange-200 mt-6"
              title={
                <span className="text-gray-900 font-medium">
                  T√≥m t·∫Øt - Xem l·∫°i th√¥ng tin tr∆∞·ªõc khi t·∫°o hackathon
                </span>
              }
            >
              <Space direction="vertical" className="w-full">
                <div className="flex justify-between">
                  <Text className="text-gray-600">T√™n hackathon:</Text>
                  <Text strong className="text-gray-900">
                    {formData.name || 'Ch∆∞a nh·∫≠p'}
                  </Text>
                </div>
                <div className="flex justify-between">
                  <Text className="text-gray-600">Danh m·ª•c:</Text>
                  <Text strong className="text-gray-900">
                    {formData.category || 'Ch∆∞a ch·ªçn'}
                  </Text>
                </div>
                <div className="flex justify-between">
                  <Text className="text-gray-600">H√¨nh th·ª©c:</Text>
                  <Text strong className="text-gray-900">
                    {formData.format || 'online'}
                  </Text>
                </div>
                <div className="flex justify-between">
                  <Text className="text-gray-600">S·ªë th√†nh vi√™n/nh√≥m:</Text>
                  <Text strong className="text-gray-900">
                    {formData.minTeamSize || 1} - {formData.maxTeamSize || 4}{' '}
                    ng∆∞·ªùi
                  </Text>
                </div>
                <div className="flex justify-between">
                  <Text className="text-gray-600">S·ªë gi·∫£i th∆∞·ªüng:</Text>
                  <Text strong className="text-gray-900">
                    {prizes.length} gi·∫£i
                  </Text>
                </div>
                <div className="flex justify-between">
                  <Text className="text-gray-600">S·ªë giai ƒëo·∫°n:</Text>
                  <Text strong className="text-gray-900">
                    {stages.length} giai ƒëo·∫°n
                  </Text>
                </div>
                <div className="flex justify-between">
                  <Text className="text-gray-600">Tham gia c√° nh√¢n:</Text>
                  <Text strong className="text-gray-900">
                    {formData.allowIndividual !== false ? 'C√≥' : 'Kh√¥ng'}
                  </Text>
                </div>
                <div className="flex justify-between">
                  <Text className="text-gray-600">Y√™u c·∫ßu x√°c minh:</Text>
                  <Text strong className="text-gray-900">
                    {formData.requireVerification ? 'C√≥' : 'Kh√¥ng'}
                  </Text>
                </div>
              </Space>
            </Card>
          </Card>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className=" mx-auto">
        <div className="mb-8">
          <Button
            onClick={() => navigate(-1)}
            type="text"
            icon={<ArrowLeftOutlined />}
            className="mb-4 text-gray-600"
          >
            Quay l·∫°i Admin Dashboard
          </Button>

          <div className="flex justify-between items-center">
            <div>
              <Title level={3} className="text-gray-900 m-0">
                T·∫°o Hackathon M·ªõi
              </Title>
              <Text className="text-gray-500">
                Thi·∫øt l·∫≠p v√† c·∫•u h√¨nh hackathon m·ªõi cho sinh vi√™n FPT
              </Text>
            </div>
            <div className="bg-blue-50 text-blue-600 px-4 py-1 rounded-lg border border-blue-200">
              B∆∞·ªõc {currentStep + 1}/4
            </div>
          </div>
        </div>

        <Steps
          current={currentStep}
          className="mb-8"
          items={steps.map((step) => ({
            title: <span className="text-gray-600">{step.title}</span>,
            icon: step.icon,
          }))}
        />

        {renderStepContent()}

        <div className="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
          <Button
            icon={<ArrowLeftOutlined />}
            onClick={prevStep}
            disabled={currentStep === 0}
            className="text-gray-600"
          >
            Quay l·∫°i
          </Button>

          {currentStep < steps.length - 1 ? (
            <Button
              type="primary"
              icon={<ArrowRightOutlined />}
              onClick={nextStep}
            >
              Ti·∫øp theo
            </Button>
          ) : (
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => {
                console.log('Form submitted', formData);
                alert('T·∫°o hackathon th√†nh c√¥ng!');
              }}
            >
              T·∫°o Hackathon
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}
